---

name: 'Setup Django backend'
description: 'Set up prerequisites for a Maykin Django backend'

inputs:
  apt-packages:
    description: Any apt packages to install, space-separated
    required: false
    default: 'gettext postgresql-client'

  python-version:
    description: Python version, passed to actions/setup-python
    required: true
    default: '3.10'

  optimize-postgres:
    description: >
      Tune postgres for non-durable but faster tests. Requires 'pg-service' name. Set
      to string 'yes' to enable (the default).
    required: false
    default: 'yes'

  pg-service:
    description: >
      Name of the postgres service. If not specified (the default), no optimization is
      done. See 'optimize-postgres'.
    required: false
    default: ''

  setup-node:
    description: Whether to setup node and npm packages.
    required: false
    default: 'yes'

  nvmrc-custom-dir:
    description: Directory within the github.workspace directory where to find the .nvmrc file (for the setup-node action).
    required: false
    default: ''

  npm-ci-flags:
    description: Additional arguments for the 'npm ci' command.
    required: false
    default: ''

  working-directory:
    description: Specifies the working directory where commands are run.
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Install OS dependencies
      if: ${{ inputs.apt-packages }}
      run: |
        sudo apt-get update
        sudo apt-get install --yes ${{ inputs.apt-packages }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Tune PostgreSQL for test performance
      if: ${{ inputs.pg-service != '' && inputs.optimize-postgres == 'yes' }}
      run: |
        docker exec -i ${{ inputs.pg-service }} bash << EOF
          sed -i -e 's/#fsync = on/fsync = off/' /var/lib/postgresql/data/postgresql.conf
          sed -i -e 's/#full_page_writes = on/full_page_writes = off/' /var/lib/postgresql/data/postgresql.conf
          sed -i -e 's/#synchronous_commit = on/synchronous_commit = off/' /var/lib/postgresql/data/postgresql.conf
          sed -i -e 's/shared_buffers = 128MB/shared_buffers = 2GB/' /var/lib/postgresql/data/postgresql.conf
          sed -i -e 's/max_wal_size = 1GB/max_wal_size = 4GB/' /var/lib/postgresql/data/postgresql.conf
        EOF

        docker restart --time=0 ${{ inputs.pg-service }}

        # block until container is up and running again
        until pg_isready -h 127.0.0.1; do
          echo "Waiting for DB to be up again..."
          sleep 1
        done

        echo "Done configuring PostgreSQL for faster tests."
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Calculate requirements path
      id: requirements_path
      run: |
        if [[ "${{ inputs.working-directory }}" ]]
        then
          prefix=${{ inputs.working-directory }}/
        else
          prefix=''
        fi
        echo "requirements_dir_prefix=${prefix}" >> $GITHUB_OUTPUT
      shell: bash

    - uses: actions/setup-python@v5
      id: setup_python
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install uv (pip alternative)
      id: setup_uv
      # Docs: https://github.com/astral-sh/uv?tab=readme-ov-file#getting-started
      run: |
        pip install uv
        # calculate cache parameters

        cache_dependency_path="${{ steps.requirements_path.outputs.requirements_dir_prefix }}requirements/*.txt"

        ubuntu_version=$(lsb_release -rs)
        restore_key="uv-${{ runner.os }}-Ubuntu-${ubuntu_version}-python-${{ steps.setup_python.outputs.python-version }}"

        echo "uv_cache_dir=$(uv cache dir)" >> "$GITHUB_OUTPUT"
        echo "cache_dependency_path=${cache_dependency_path}" >> "$GITHUB_OUTPUT"
        echo "cache_restore_key=${restore_key}" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: (Restore) uv cache
      id: uv-cache-restore
      uses: actions/cache/restore@v4
      with:
        key: ${{ steps.setup_uv.outputs.cache_restore_key }}-${{ hashFiles(steps.setup_uv.outputs.cache_dependency_path) }}
        restore-keys: |
          ${{ steps.setup_uv.outputs.cache_restore_key }}-
        path: ${{ steps.setup_uv.outputs.uv_cache_dir }}

    - name: Install backend dependencies
      run: |
        uv pip install \
          --system \
          -r requirements/ci.txt
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    # TODO: enable cache
    - uses: actions/setup-node@v4
      if: ${{ inputs.setup-node == 'yes' }}
      with:
        node-version-file: ${{ inputs.nvmrc-custom-dir && format('{0}/{1}', inputs.nvmrc-custom-dir, '.nvmrc') || '.nvmrc' }}

    - name: Build frontend
      if: ${{ inputs.setup-node == 'yes' }}
      run: |
        npm ci ${{ inputs.npm-ci-flags }}
        npm run build
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Save uv cache
      id: uv-cache-save
      if: always() && steps.uv-cache-restore.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        key: ${{ steps.setup_uv.outputs.cache_restore_key }}-${{ hashFiles(steps.setup_uv.outputs.cache_dependency_path) }}
        path: ${{ steps.setup_uv.outputs.uv_cache_dir }}

